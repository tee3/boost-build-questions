import toolset ;
import feature ;

feature.feature platform
  :
    platform-host
    platform-a
  :
    composite
    propagated
    optional
    symmetric
  ;
feature.compose <platform>platform-host
  :
    <toolset>clang
  ;
feature.compose <platform>platform-a
  :
    <toolset>darwin-4.2.1
  ;

# this results in the desired behavior.
explicit cross final-c ;
make cross-final-c
  :
    cross
  :
    @built_tool
  :
    <built_tool>.//built_tool/<platform>platform-host

    <platform>platform-a
  ;

# this results in the built tool being built with darwin
explicit cross-final-b ;
make cross-final-b
  :
    cross
  :
    @built_tool
  :
    <built_tool>.//built_tool

    <platform>platform-a
  ;

# this results in cross-final-a in the directory for the clang
explicit cross-final-a ;
make cross-final-a
  :
    cross/<platform>platform-a
  :
    @built_tool
  :
    <built_tool>.//built_tool
  ;

# The definition of this built tool.
explicit built_tool ;
exe built_tool
  :
     built_tool.c
  ;

# The definition of the cross-compiled system.
explicit cross ;
exe cross
  :
    cross.c
  ;

# The built_tool feature
feature.feature <built_tool> : : dependency free ;

toolset.flags built_tool COMMAND <built_tool> ;

rule built_tool ( targets * : source * : properties * )
{
  DEPENDS $(targets) : [ on $(targets) return $(COMMAND) ] ;
}

actions built_tool bind COMMAND
{
  $(COMMAND:E=built_tool) $(>) $(<)
}
